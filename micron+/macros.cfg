[gcode_macro PRINT_START]
gcode:
  {% set printsettings = printer['gcode_macro _PRINTER_SETTINGS']|default({}) %}
  {% set probe_temp    = printsettings.probe_temp|default(0) %}
  {% set park_macro    = printsettings.park_macro|default("none") %}
  {% set purge_macro   = params.PURGE|default(printsettings.purge_macro|default("none")) %}

  {% set BED = params.BED|default(60)|float %}
  {% set HOTEND = params.HOTEND|default(205)|float %}
  {% set MATERIAL = params.MATERIAL|default("PLA")|string %}
  # {% set MESH = params.MESH|default(99)|int %}

  CLEAR_PAUSE
  # BED_MESH_CLEAR

  SET_FAN_SPEED FAN=mcu SPEED=0.5

  MESSAGE MSG="Waiting for bed temp"

  M107                                #turn off parts fan
  {% if probe_temp > 0 %}
    M104 S{probe_temp|float*0.65}
  {% endif %}
  #
  M190 S{BED}
  
  {% if probe_temp > 0 %}
    M109 S{probe_temp}
  {% endif %}

  _beep_caution_printer_moving
  G4 P3000

  G32 
  
  # {% if MESH == 0 %}
  #   MESSAGE MSG="No Mesh"
  # {% elif MESH == 1 %}
  #   MESSAGE MSG="Doing full Mesh"
  #   _BED_MESH_CALIBRATE
  # {% else %}
  #   MESSAGE MSG="Kamp time"
  #   BED_MESH_CALIBRATE
  # {% endif %}   


  {% if park_macro != 'none' %}
    {park_macro}
  {% endif %}    
  
  MESSAGE MSG="Waiting for extruder temp"
  M109 S{HOTEND} T0
  
  
  {% if purge_macro != 'none' %}
    G92 E0.0
    {purge_macro}
  {% endif %}    
  G92 E0
  
  MESSAGE MSG="Time to party"



[gcode_macro START_PRINT]
gcode:post
  PRINT_START { rawparams }

[gcode_macro PRINT_END]
gcode:
  _TOOLHEAD_PARK_PAUSE_CANCEL
  G1 E-5.2 F1800                  ; retract filament
  _beep_done
  
  M400                             ; Finish Moves
  M221 S100                        ; reset flow to 100%
  M220 S100                        ; reset speed to 100%
  
  M104 S0                          ; turn off hotend
  M140 S0                          ; turn off bed
  M106 S0                          ; turn off fan


  M117 Finished!
  RESPOND PREFIX= MSG=""
  M117 
  STATUS_READY
  SET_FAN_SPEED FAN=mcu SPEED=0



[gcode_macro END_PRINT]
gcode:
  PRINT_END { rawparams }

[gcode_macro _PURGE]
gcode: 
  {% set purge_temp_min = printer["gcode_macro _PRINTER_SETTINGS"].purge_temp_min|default(260)%}
  {% set purge_len = printer["gcode_macro _PRINTER_SETTINGS"].purge_len|default(20)%}
  {% set purge_spd = printer["gcode_macro _PRINTER_SETTINGS"].purge_spd|default(100)%}
  {% set purge_ret = printer["gcode_macro _PRINTER_SETTINGS"].purge_ret|default(12)%}
  {% set ooze_dwell = printer["gcode_macro _PRINTER_SETTINGS"].ooze_dwell|default(3)%}
  
  ## Move to bucket 
  G1 X{start_x} Y{start_y} F6000 
  G1 Z{start_z} F1500 
  
  {% if printer.extruder.temperature >= purge_temp_min %}
    M83      ; relative mode
    G1 E{purge_len} F{purge_spd}
    G1 E-{purge_ret} F{purge_spd * 5}
    G4 P{ooze_dwell * 1000}
    G92 E0   ; reset extruder
  {% else %}
    MESSAGE MSG="Extruder not hot enough"
  {% endif %}



[gcode_macro PARK_END]
gcode:
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 5} F3600 

[gcode_macro PARK_FRONT]
gcode:
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 5} F3600 

# Qoute:
# > this is where the awkwardness of JINJA (the shit in the {}) being a preprocessor shows up
# > the jinja stuff gets executed first, before any of the actual gcode does...
# so 2 macros are needed
[gcode_macro SHUTDOWN_PRINTER]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  
  {% if printer['gcode_macro status_off'] is defined %}
    status_off
  {% endif %}
  
  {% if printer['gcode_macro _CASELIGHT_OFF'] is defined %}
    _CASELIGHT_OFF
  {% endif %}
  
  {% if printer['neopixel skirt'] is defined %}
    SET_LED LED="skirt" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  {% endif %}

  M84


#[gcode_macro _PRINTER_POWEROFF]
#gcode:
#  {action_call_remote_method("set_device_power", device="printer",state="off")}
  
##################
# Todo: interrutable HEATsoak with delay gcode
[gcode_macro HEATSOAK] 
gcode:
  {% set DWELL = params.DWELL|default(300000)|int %}             # Heatsoaking duration, default is 5 minutes (300000 milliseconds)
  G4 P{DWELL}
  _beep_preheated

##################################################
################## G CODES ##############
##################################################
[gcode_macro G32]
gcode:
  {% if printer.configfile.settings.probe is defined %}                     # Check if a probe is configured
    {% if printer.configfile.settings.z_tilt is defined %}                  # Check if the machine trams by tilting Z
      {% set need_tram = True | abs %}                                      #
      {% set tram_command = 'Z_TILT_ADJUST' %}                              #
    {% elif printer.configfile.settings.quad_gantry_level is defined %}     # Check if the machine trams by tilting the gantry
      {% set need_tram = True | abs %}                                      #
      {% set tram_command = 'QUAD_GANTRY_LEVEL' %}                          #
    {% else %}                                                              #
      {% set need_tram = False | abs %}                                     # If no tramming config found, don't tram
    {% endif %}                                                             #                                                            #
  {% endif %}    


  {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
    G28 XY
  {% endif %}     

  G28 Z

  {% if need_tram == True %}
    {tram_command}
    G28 Z
  {% endif %}   
  

# source: https://github.com/Frix-x/klippain/blob/main/macros/helpers/bed_heater_ctrl.cfg
#         https://github.com/Frix-x/klippain/blob/main/macros/helpers/hotend_heater_ctrl.cfg
# date copy : 2023-11-21
[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.extruder.temperature|float %}

  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if S != 0 %}
      {% if actual_temp <= S %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S}
      {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={S}
      {% endif %}   
  {% endif %}


[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.heater_bed.temperature|float %}

  M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if S != 0 %}
      {% if actual_temp <= S %}
          TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S}
      {% else %}
          TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={S}
      {% endif %}   
  {% endif %}


####

[gcode_macro M600]
gcode:
  _beep_filament_change
  PAUSE X=10 Y=10 Z_MIN=50

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
  {% set pa = params.K|float %}
  SET_PRESSURE_ADVANCE ADVANCE={pa}


[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
      {% if ' ' in item %}
          {% set ns.path = ['printer', "['%s']" % (item), ''] %}
      {% else %}
          {% set ns.path = ['printer.', item, ''] %}   
      {% endif %} 

      {% if search in ns.path|lower %}
          { action_respond_info(ns.path|join) }
      {% endif %} 

      {% if printer[item].items() %}
          {% for childkey, child in printer[item].items() recursive %}
              {% set ns.path = ns.path[:loop.depth|int + 1] %}

              {% if ' ' in childkey %}
                  {% set null = ns.path.append("['%s']" % (childkey)) %}
              {% else %}
                  {% set null = ns.path.append(".%s" % (childkey)) %}
              {% endif %} 

              {% if child is mapping  %}
                  { loop(child.items()) }
              {% else %}
                  {% if search in ns.path|lower %}
                      { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                  {% endif %} 
              {% endif %} 
              
          {% endfor %}
      {% endif %} 
  {% endfor %}


# https://github.com/Klipper3d/klipper/issues/4816

[gcode_macro MESSAGE]
description: Output message on console and display (MSG="required-message")
variable_msg_stack: [""]
gcode:
    {% if params.MSG is not defined %}
        { action_respond_info("MESSAGE macro called without MSG parameter; ignored") }
    {% else %}
        # add message to top entry on stack
        {% set msg = params.MSG|default("") %}
        {% set _ = msg_stack.pop() %}
        {% set msg_stack = msg_stack + [msg] %}
        SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="{msg_stack}"
        
        # output message to display and console
        MESSAGE_UPDATE
    {% endif %}

[gcode_macro MESSAGE_PUSH]
description: Push the message stack, and optionally display a message (MSG="optional-message")
gcode:
    {% set msg = params.MSG|default("") %}

    # push the stack down one level
    {% set msg_stack = printer["gcode_macro MESSAGE"].msg_stack %}
    {% set msg_stack = msg_stack + [""] %}
    SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="{msg_stack}"

    # output message if we have one
    {% if params.MSG is defined %}
        MESSAGE msg="{msg}"
    {% endif %}
    

[gcode_macro MESSAGE_POP]
description: Pop the message stack, restoring the prior message
gcode:
    {% set msg_stack = printer["gcode_macro MESSAGE"].msg_stack %}
    {% if msg_stack|length > 1 %}
        # pop the message off the stack
        {% set _ = msg_stack.pop() %}
        SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="{msg_stack}"

        # update the displays
        MESSAGE_UPDATE
    {% else %}
        { action_respond_info("MESSAGE_POP called with no remaining MESSAGE_PUSH items; ignored") }
    {% endif %}

[gcode_macro MESSAGE_RESET]
description: Resets the message stack (recommended in PRINT_START to repair unmatched MESSAGE_PUSH/MESSAGE_POP)
gcode:
    SET_GCODE_VARIABLE macro=MESSAGE variable=msg_stack value="['']"

[gcode_macro MESSAGE_UPDATE]
description: Internal macro used to display the current message from the stack (MSG="required-message")
gcode:
    # get message from the stack, eliminating any blank messages
    {% set msg_stack = printer["gcode_macro MESSAGE"].msg_stack|reject("eq", "")|list %}
    {% if msg_stack|length > 0 %}
        {% set msg = msg_stack[msg_stack|length - 1] %}
    {% else %}
        {% set msg = "" %}
    {% endif %}

    # display, including prior messages if we have any
    {% if msg_stack|length > 1 %}
        {% set _ = msg_stack.pop() %}
        {% set prior_msgs = msg_stack|reverse|join(", ") %}
        M117 {msg} ({prior_msgs})
        RESPOND MSG="{msg} ({prior_msgs})"
    {% else %}
        M117 {msg}
        {% if msg != "" %}
            RESPOND MSG="{msg}"
        {% endif %}
    {% endif %}
